import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, KeyboardButton
)
from aiogram.filters import CommandStart
from config import *

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
user_data = {}

# üöÄ –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
@dp.message(CommandStart())
async def start(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="register")]
        ]
    )
    await message.answer("""
–ó–∞–º—É—á–∏–ª–∏ –¥–æ–ª–≥–∏? –í–µ—Ä–Ω–∏—Ç–µ —Å–µ–±–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å–≤–æ–±–æ–¥—É —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞–º–∏ —Å 13-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º!

–ö–æ–º–ø–∞–Ω–∏—è ¬´–°—Ç–∞—Ä—Ç¬ª —Å 2012 –≥–æ–¥–∞ –ø–æ–º–æ–≥–∞–µ—Ç –ª—é–¥—è–º –ª–µ–≥–∞–ª—å–Ω–æ —Å–ø–∏—Å—ã–≤–∞—Ç—å –¥–æ–ª–≥–∏ —á–µ—Ä–µ–∑ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ. –ù–∞—à –≤—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –≤ –Ø–Ω–¥–µ–∫—Å–µ –∏ –±–æ–ª–µ–µ 10 000 —É—Å–ø–µ—à–Ω—ã—Ö –¥–µ–ª ‚Äî —ç—Ç–æ –≤–∞—à–∞ –≥–∞—Ä–∞–Ω—Ç–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—è.

–ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å?
‚úÖ –≠–∫—Å–ø–µ—Ä—Ç—ã —Å 2015 –≥–æ–¥–∞: –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å –º–æ–º–µ–Ω—Ç–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —Å–∏–ª—É –∑–∞–∫–æ–Ω–∞ –æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–µ —Ñ–∏–∑–ª–∏—Ü –∏ –∑–Ω–∞–µ–º –≤—Å–µ –Ω—é–∞–Ω—Å—ã.
‚úÖ –°–ø–∏—à–µ–º –¥–æ 100% –¥–æ–ª–≥–æ–≤ –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º, –∑–∞–π–º–∞–º –∏ —à—Ç—Ä–∞—Ñ–∞–º ‚Äî –∑–∞–∫–æ–Ω–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ.
‚úÖ –ü–æ–ª–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ ¬´–ø–æ–¥ –∫–ª—é—á¬ª: –û—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–æ –∑–∞—â–∏—Ç—ã –≤ —Å—É–¥–µ ‚Äî –≤—Å–µ –∑–∞–±–æ—Ç—ã –Ω–∞ –Ω–∞—Å.
‚úÖ –°–æ—Ö—Ä–∞–Ω–∏–º –≤–∞—à–µ –∏–º—É—â–µ—Å—Ç–≤–æ: –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –∂–∏–ª—å–µ –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –≤–µ—â–∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è —Å –≤–∞–º–∏ (—Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç. 446 –ì–ü–ö –†–§).
‚úÖ –í–∞—à–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: –ü—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º –≤ –¥–æ–≥–æ–≤–æ—Ä–µ –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω—É—é –≥–∞—Ä–∞–Ω—Ç–∏—é –∑–∞—â–∏—Ç—ã –≤–∞—Å –∏ –≤–∞—à–µ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞5.

–ö–∞–∫ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º?

–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: –û—Ü–µ–Ω–∏–º –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é –∏ —à–∞–Ω—Å—ã –Ω–∞ —Å–ø–∏—Å–∞–Ω–∏–µ.

–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: –°–æ–±–µ—Ä–µ–º –∏ –æ—Ñ–æ—Ä–º–∏–º –≤—Å–µ –∑–∞ –≤–∞—Å.

–°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –≤ —Å—É–¥–µ: –ù–∞—à–∏ —é—Ä–∏—Å—Ç—ã –≤–æ–∑—å–º—É—Ç –Ω–∞ —Å–µ–±—è –æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏—Å—Ç–∞–≤–∞–º–∏ –∏ –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞–º–∏.
–í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å –Ω–∞—à–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.

–•–≤–∞—Ç–∏—Ç –∂–∏—Ç—å –≤ —Å—Ç—Ä–µ—Å—Å–µ!
–î–æ–≤–µ—Ä—å—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –ª–∏–¥–µ—Ä–∞–º —Å –±–µ–∑—É–ø—Ä–µ—á–Ω–æ–π —Ä–µ–ø—É—Ç–∞—Ü–∏–µ–π. –ë–æ–ª–µ–µ 10 000 –¥–æ–≤–æ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ 100% –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –¥–µ–ª –≥–æ–≤–æ—Ä—è—Ç —Å–∞–º–∏ –∑–∞ —Å–µ–±—è.

–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ –∂–∏–∑–Ω–∏ –±–µ–∑ –¥–æ–ª–≥–æ–≤ ‚Äî –ø–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!
–ß–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–±—ã—Ç—å –æ –¥–æ–ª–≥–∞—Ö –Ω–∞–≤—Å–µ–≥–¥–∞.""", reply_markup=keyboard)

# üì± –ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.callback_query(lambda c: c.data == "register")
async def ask_phone(callback: types.CallbackQuery):
    phone_keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=phone_keyboard)
    await callback.answer()

# ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∏ –∑–∞–ø—Ä–æ—Å —Å–æ–≥–ª–∞—Å–∏—è
@dp.callback_query(lambda c: c.data == "register")
async def ask_phone(callback: types.CallbackQuery):
    phone_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)],
            [KeyboardButton(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n–í—ã –º–æ–∂–µ—Ç–µ:\n‚Ä¢ –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É üì± –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏\n‚Ä¢ –ò–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567",
        reply_markup=phone_keyboard
    )
    await callback.answer()

@dp.message(lambda m: m.contact or m.text)
async def handle_phone(message: types.Message):
    user = message.from_user
    phone = None

    if message.contact:
        phone = message.contact.phone_number
    elif message.text:
        text = message.text.strip()
        if text.startswith("+") and text[1:].isdigit() and 10 <= len(text) <= 15:
            phone = text
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: +79991234567")
            return

    user_data[str(user.id)] = {
        "name": f"{user.first_name or ''} {user.last_name or ''}".strip(),
        "username": f"@{user.username}" if user.username else "–Ω–µ—Ç",
        "phone": phone
    }

    confirm_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö", callback_data=f"consent_{user.id}")]
        ]
    )
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:", reply_markup=confirm_keyboard)

# üì© –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω—É
@dp.callback_query(lambda c: c.data.startswith("consent_"))
async def send_application(callback: types.CallbackQuery):
    user_id = callback.data.split("_")[1]
    data = user_data.get(user_id)

    if not data:
        await callback.answer("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    text = (
        f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n"
        f"üë§ –ò–º—è: {data['name']}\n"
        f"üì© Username: {data['username']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üÜî ID: {user_id}"
    )

    confirm_btn = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{user_id}")]
        ]
    )

    await bot.send_message(chat_id=ADMIN_ID, text=text, reply_markup=confirm_btn)
    await callback.message.edit_text("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.")
    await callback.answer()

# üéâ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
@dp.callback_query(lambda c: c.data.startswith("approve_"))
async def approve_user(callback: types.CallbackQuery):
    user_id = callback.data.split("_")[1]
    data = user_data.get(user_id)

    if not data:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await bot.send_message(chat_id=int(user_id), text=f"""
üéâ {data['name']}, –≤–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!

–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞ –≤–∞–∂–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É, —á—Ç–æ–±—ã —é—Ä–∏—Å—Ç –º–æ–≥ –æ—Ü–µ–Ω–∏—Ç—å –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ:üëâ 
https://docs.google.com/forms/d/e/1FAIpQLSegf5gGuKxdegNJs8_49PusHtrSrtzP88-7ed2CHipR3W_jXw/viewform?usp=sharing
""")
    await callback.answer("–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())